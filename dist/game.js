"use strict";

var gamepads = {};

function gamepadHandler(event, connecting) {
  console.log('hi', event.gamepad.index);
  var gamepad = event.gamepad;
  // Note:
  // gamepad === navigator.getGamepads()[gamepad.index]

  if (connecting) {
    gamepads[gamepad.index] = gamepad;
  } else {
    delete gamepads[gamepad.index];
  }

  console.log(gamepad);
}

window.addEventListener("gamepadconnected", function (e) {
  gamepadHandler(e, true);
}, false);
window.addEventListener("gamepaddisconnected", function (e) {
  gamepadHandler(e, false);
}, false);

console.log(navigator.getGamepads());

function takeInput() {
  var gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();

  var pad = gamepads[0];
  var axes = pad.axes;

  //console.log(buttons);
  for (var i = 0; i < pad.axes.length; i++) {
    var el = document.getElementById('ax' + i);
    el.innerHTML = pad.axes[i];
  }

  return { x: axes[1], y: axes[3] };
}

var _pos = { r: 0, x: 100, y: 100 };
var accel = { r: 0, x: 0, y: 0 };
function update(input) {
  _pos.x += input.x;
  _pos.y += input.y;
  return _pos;
}

class Sprite {
  constructor(src) {
    var img = new Image();
    img.src = src;
    this.img = img;
  }

  draw(context, pos) {
    context.drawImage(this.img, pos.x, pos.y);
  }
};
let car = new Sprite('./assets/car.png');
var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');

function render(pos) {
  car.draw(context, pos);
}

function gameLoop() {
  var input = takeInput();
  var pos = update(input);
  render(pos);
  requestAnimationFrame(gameLoop);
}

requestAnimationFrame(gameLoop);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nYW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUksV0FBVyxFQUFYOztBQUVKLFNBQVMsY0FBVCxDQUF3QixLQUF4QixFQUErQixVQUEvQixFQUEyQztBQUMxQyxVQUFRLEdBQVIsQ0FBWSxJQUFaLEVBQWtCLE1BQU0sT0FBTixDQUFjLEtBQWQsQ0FBbEIsQ0FEMEM7QUFFekMsTUFBSSxVQUFVLE1BQU0sT0FBTjs7OztBQUYyQixNQU1yQyxVQUFKLEVBQWdCO0FBQ2QsYUFBUyxRQUFRLEtBQVIsQ0FBVCxHQUEwQixPQUExQixDQURjO0dBQWhCLE1BRU87QUFDTCxXQUFPLFNBQVMsUUFBUSxLQUFSLENBQWhCLENBREs7R0FGUDs7QUFNQSxVQUFRLEdBQVIsQ0FBWSxPQUFaLEVBWnlDO0NBQTNDOztBQWVBLE9BQU8sZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDLFVBQVMsQ0FBVCxFQUFZO0FBQUUsaUJBQWUsQ0FBZixFQUFrQixJQUFsQixFQUFGO0NBQVosRUFBMEMsS0FBdEY7QUFDQSxPQUFPLGdCQUFQLENBQXdCLHFCQUF4QixFQUErQyxVQUFTLENBQVQsRUFBWTtBQUFFLGlCQUFlLENBQWYsRUFBa0IsS0FBbEIsRUFBRjtDQUFaLEVBQTJDLEtBQTFGOztBQUVBLFFBQVEsR0FBUixDQUFZLFVBQVUsV0FBVixFQUFaOztBQUVBLFNBQVMsU0FBVCxHQUFxQjtBQUNuQixNQUFJLFdBQVcsVUFBVSxXQUFWLEdBQ2IsVUFBVSxXQUFWLEVBRGEsR0FFYixVQUFVLGlCQUFWLEVBRmEsQ0FESTs7QUFLbkIsTUFBSSxNQUFNLFNBQVMsQ0FBVCxDQUFOLENBTGU7QUFNbkIsTUFBSSxPQUFPLElBQUksSUFBSjs7O0FBTlEsT0FTZCxJQUFJLElBQUUsQ0FBRixFQUFLLElBQUksSUFBSSxJQUFKLENBQVMsTUFBVCxFQUFpQixHQUFuQyxFQUF3QztBQUN0QyxRQUFJLEtBQUssU0FBUyxjQUFULENBQXdCLE9BQU8sQ0FBUCxDQUE3QixDQURrQztBQUV0QyxPQUFHLFNBQUgsR0FBZSxJQUFJLElBQUosQ0FBUyxDQUFULENBQWYsQ0FGc0M7R0FBeEM7O0FBS0EsU0FBTyxFQUFDLEdBQUcsS0FBSyxDQUFMLENBQUgsRUFBWSxHQUFHLEtBQUssQ0FBTCxDQUFILEVBQXBCLENBZG1CO0NBQXJCOztBQWlCQSxJQUFJLE9BQU8sRUFBQyxHQUFFLENBQUYsRUFBSyxHQUFFLEdBQUYsRUFBTyxHQUFFLEdBQUYsRUFBcEI7QUFDSixJQUFJLFFBQVEsRUFBQyxHQUFHLENBQUgsRUFBTSxHQUFFLENBQUYsRUFBSyxHQUFFLENBQUYsRUFBcEI7QUFDSixTQUFTLE1BQVQsQ0FBZ0IsS0FBaEIsRUFBdUI7QUFDckIsT0FBSyxDQUFMLElBQVUsTUFBTSxDQUFOLENBRFc7QUFFckIsT0FBSyxDQUFMLElBQVUsTUFBTSxDQUFOLENBRlc7QUFHckIsU0FBTyxJQUFQLENBSHFCO0NBQXZCOztBQU1BLE1BQU0sTUFBTixDQUFhO0FBQ1gsY0FBWSxHQUFaLEVBQWlCO0FBQ2YsUUFBSSxNQUFNLElBQUksS0FBSixFQUFOLENBRFc7QUFFZixRQUFJLEdBQUosR0FBVSxHQUFWLENBRmU7QUFHZixTQUFLLEdBQUwsR0FBVyxHQUFYLENBSGU7R0FBakI7O0FBTUEsT0FBSyxPQUFMLEVBQWMsR0FBZCxFQUFrQjtBQUNoQixZQUFRLFNBQVIsQ0FBa0IsS0FBSyxHQUFMLEVBQVUsSUFBSSxDQUFKLEVBQU8sSUFBSSxDQUFKLENBQW5DLENBRGdCO0dBQWxCO0NBUEY7QUFXQSxJQUFJLE1BQU0sSUFBSSxNQUFKLENBQVcsa0JBQVgsQ0FBTjtBQUNKLElBQUksU0FBUyxTQUFTLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBVDtBQUNKLElBQUksVUFBVSxPQUFPLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBVjs7QUFFSixTQUFTLE1BQVQsQ0FBZ0IsR0FBaEIsRUFBcUI7QUFDbkIsTUFBSSxJQUFKLENBQVMsT0FBVCxFQUFrQixHQUFsQixFQURtQjtDQUFyQjs7QUFLQSxTQUFTLFFBQVQsR0FBb0I7QUFDbEIsTUFBSSxRQUFRLFdBQVIsQ0FEYztBQUVsQixNQUFJLE1BQU0sT0FBTyxLQUFQLENBQU4sQ0FGYztBQUdsQixTQUFPLEdBQVAsRUFIa0I7QUFJbEIsd0JBQXNCLFFBQXRCLEVBSmtCO0NBQXBCOztBQVFBLHNCQUFzQixRQUF0QiIsImZpbGUiOiJnYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2FtZXBhZHMgPSB7fTtcblxuZnVuY3Rpb24gZ2FtZXBhZEhhbmRsZXIoZXZlbnQsIGNvbm5lY3RpbmcpIHtcblx0Y29uc29sZS5sb2coJ2hpJywgZXZlbnQuZ2FtZXBhZC5pbmRleCk7XG4gIHZhciBnYW1lcGFkID0gZXZlbnQuZ2FtZXBhZDtcbiAgLy8gTm90ZTpcbiAgLy8gZ2FtZXBhZCA9PT0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKClbZ2FtZXBhZC5pbmRleF1cblxuICBpZiAoY29ubmVjdGluZykge1xuICAgIGdhbWVwYWRzW2dhbWVwYWQuaW5kZXhdID0gZ2FtZXBhZDtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgZ2FtZXBhZHNbZ2FtZXBhZC5pbmRleF07XG4gIH1cblxuICBjb25zb2xlLmxvZyhnYW1lcGFkKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIGZ1bmN0aW9uKGUpIHsgZ2FtZXBhZEhhbmRsZXIoZSwgdHJ1ZSk7IH0sIGZhbHNlKTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZ2FtZXBhZGRpc2Nvbm5lY3RlZFwiLCBmdW5jdGlvbihlKSB7IGdhbWVwYWRIYW5kbGVyKGUsIGZhbHNlKTsgfSwgZmFsc2UpO1xuXG5jb25zb2xlLmxvZyhuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKSk7XG5cbmZ1bmN0aW9uIHRha2VJbnB1dCgpIHtcbiAgdmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzID8gXG4gICAgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCkgOlxuICAgIG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkcygpO1xuICBcbiAgdmFyIHBhZCA9IGdhbWVwYWRzWzBdO1xuICB2YXIgYXhlcyA9IHBhZC5heGVzO1xuXG4gIC8vY29uc29sZS5sb2coYnV0dG9ucyk7XG4gIGZvciAodmFyIGk9MDsgaSA8IHBhZC5heGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F4JyArIGkpO1xuICAgIGVsLmlubmVySFRNTCA9IHBhZC5heGVzW2ldO1xuICB9XG5cbiAgcmV0dXJuIHt4OiBheGVzWzFdLCB5OiBheGVzWzNdfTtcbn1cblxudmFyIF9wb3MgPSB7cjowLCB4OjEwMCwgeToxMDB9O1xudmFyIGFjY2VsID0ge3I6IDAsIHg6MCwgeTowfTtcbmZ1bmN0aW9uIHVwZGF0ZShpbnB1dCkge1xuICBfcG9zLnggKz0gaW5wdXQueDtcbiAgX3Bvcy55ICs9IGlucHV0Lnk7XG4gIHJldHVybiBfcG9zO1xufVxuXG5jbGFzcyBTcHJpdGUge1xuICBjb25zdHJ1Y3RvcihzcmMpIHtcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLnNyYyA9IHNyY1xuICAgIHRoaXMuaW1nID0gaW1nO1xuICB9XG5cbiAgZHJhdyhjb250ZXh0LCBwb3Mpe1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCBwb3MueCwgcG9zLnkpO1xuICB9XG59O1xubGV0IGNhciA9IG5ldyBTcHJpdGUoJy4vYXNzZXRzL2Nhci5wbmcnKTtcbnZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7XG52YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5mdW5jdGlvbiByZW5kZXIocG9zKSB7XG4gIGNhci5kcmF3KGNvbnRleHQsIHBvcyk7XG59XG5cblxuZnVuY3Rpb24gZ2FtZUxvb3AoKSB7XG4gIHZhciBpbnB1dCA9IHRha2VJbnB1dCgpO1xuICB2YXIgcG9zID0gdXBkYXRlKGlucHV0KTtcbiAgcmVuZGVyKHBvcyk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShnYW1lTG9vcCk7XG5cbn1cblxucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGdhbWVMb29wKTtcbiJdfQ==