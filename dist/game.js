"use strict";

var gamepads = {};

function gamepadHandler(event, connecting) {
  console.log('hi', event.gamepad.index);
  var gamepad = event.gamepad;
  // Note:
  // gamepad === navigator.getGamepads()[gamepad.index]

  if (connecting) {
    gamepads[gamepad.index] = gamepad;
  } else {
    delete gamepads[gamepad.index];
  }

  console.log(gamepad);
}

window.addEventListener("gamepadconnected", function (e) {
  gamepadHandler(e, true);
}, false);
window.addEventListener("gamepaddisconnected", function (e) {
  gamepadHandler(e, false);
}, false);

console.log(navigator.getGamepads());

function takeInput() {
  var gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();

  var pad = gamepads[0];
  var axes = pad.axes;

  //console.log(buttons);
  for (var i = 0; i < pad.axes.length; i++) {
    var el = document.getElementById('ax' + i);
    el.innerHTML = pad.axes[i];
  }

  return { x: axes[1], y: axes[3] };
}

var _pos = { r: 0, x: 100, y: 100 };
var accel = { r: 0, x: 0, y: 0 };
function update(input) {
  _pos.x += input.x;
  _pos.y += input.y;
  return _pos;
}

class Sprite {
  constructor(src) {
    var img = new Image();
    img.src = src;
    this.img = img;
  }

  draw(context, pos) {
    context.drawImage(this.img, pos.x, pos.y);
  }
};
let car = new Sprite('./assets/RacerMK1.png');
var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');

function render(pos) {
  car.draw(context, pos);
}

function gameLoop() {
  var input = takeInput();
  var pos = update(input);
  render(pos);
  requestAnimationFrame(gameLoop);
}

requestAnimationFrame(gameLoop);
//# sourceMappingURL=data:application/json;base64,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b0I7QUFDbEIsTUFBSSxRQUFRLFdBQVIsQ0FEYztBQUVsQixNQUFJLE1BQU0sT0FBTyxLQUFQLENBQU4sQ0FGYztBQUdsQixTQUFPLEdBQVAsRUFIa0I7QUFJbEIsd0JBQXNCLFFBQXRCLEVBSmtCO0NBQXBCOztBQVFBLHNCQUFzQixRQUF0QiIsImZpbGUiOiJnYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBnYW1lcGFkcyA9IHt9O1xyXG5cclxuZnVuY3Rpb24gZ2FtZXBhZEhhbmRsZXIoZXZlbnQsIGNvbm5lY3RpbmcpIHtcclxuXHRjb25zb2xlLmxvZygnaGknLCBldmVudC5nYW1lcGFkLmluZGV4KTtcclxuICB2YXIgZ2FtZXBhZCA9IGV2ZW50LmdhbWVwYWQ7XHJcbiAgLy8gTm90ZTpcclxuICAvLyBnYW1lcGFkID09PSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKVtnYW1lcGFkLmluZGV4XVxyXG5cclxuICBpZiAoY29ubmVjdGluZykge1xyXG4gICAgZ2FtZXBhZHNbZ2FtZXBhZC5pbmRleF0gPSBnYW1lcGFkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkZWxldGUgZ2FtZXBhZHNbZ2FtZXBhZC5pbmRleF07XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhnYW1lcGFkKTtcclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIGZ1bmN0aW9uKGUpIHsgZ2FtZXBhZEhhbmRsZXIoZSwgdHJ1ZSk7IH0sIGZhbHNlKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkZGlzY29ubmVjdGVkXCIsIGZ1bmN0aW9uKGUpIHsgZ2FtZXBhZEhhbmRsZXIoZSwgZmFsc2UpOyB9LCBmYWxzZSk7XHJcblxyXG5jb25zb2xlLmxvZyhuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKSk7XHJcblxyXG5mdW5jdGlvbiB0YWtlSW5wdXQoKSB7XHJcbiAgdmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzID9cclxuICAgIG5hdmlnYXRvci5nZXRHYW1lcGFkcygpIDpcclxuICAgIG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkcygpO1xyXG5cclxuICB2YXIgcGFkID0gZ2FtZXBhZHNbMF07XHJcbiAgdmFyIGF4ZXMgPSBwYWQuYXhlcztcclxuXHJcbiAgLy9jb25zb2xlLmxvZyhidXR0b25zKTtcclxuICBmb3IgKHZhciBpPTA7IGkgPCBwYWQuYXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F4JyArIGkpO1xyXG4gICAgZWwuaW5uZXJIVE1MID0gcGFkLmF4ZXNbaV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge3g6IGF4ZXNbMV0sIHk6IGF4ZXNbM119O1xyXG59XHJcblxyXG52YXIgX3BvcyA9IHtyOjAsIHg6MTAwLCB5OjEwMH07XHJcbnZhciBhY2NlbCA9IHtyOiAwLCB4OjAsIHk6MH07XHJcbmZ1bmN0aW9uIHVwZGF0ZShpbnB1dCkge1xyXG4gIF9wb3MueCArPSBpbnB1dC54O1xyXG4gIF9wb3MueSArPSBpbnB1dC55O1xyXG4gIHJldHVybiBfcG9zO1xyXG59XHJcblxyXG5jbGFzcyBTcHJpdGUge1xyXG4gIGNvbnN0cnVjdG9yKHNyYykge1xyXG4gICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgaW1nLnNyYyA9IHNyY1xyXG4gICAgdGhpcy5pbWcgPSBpbWc7XHJcbiAgfVxyXG5cclxuICBkcmF3KGNvbnRleHQsIHBvcyl7XHJcbiAgICBjb250ZXh0LmRyYXdJbWFnZSh0aGlzLmltZywgcG9zLngsIHBvcy55KTtcclxuICB9XHJcbn07XHJcbmxldCBjYXIgPSBuZXcgU3ByaXRlKCcuL2Fzc2V0cy9SYWNlck1LMS5wbmcnKTtcclxudmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcclxudmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcihwb3MpIHtcclxuICBjYXIuZHJhdyhjb250ZXh0LCBwb3MpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2FtZUxvb3AoKSB7XHJcbiAgdmFyIGlucHV0ID0gdGFrZUlucHV0KCk7XHJcbiAgdmFyIHBvcyA9IHVwZGF0ZShpbnB1dCk7XHJcbiAgcmVuZGVyKHBvcyk7XHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGdhbWVMb29wKTtcclxuXHJcbn1cclxuXHJcbnJlcXVlc3RBbmltYXRpb25GcmFtZShnYW1lTG9vcCk7XHJcbiJdfQ==